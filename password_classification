import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Load the data
data = pd.read_csv('passwords.csv')
print("Data loaded successfully. Dataset size:", data.shape)

# Assuming that '2' represents machine-generated passwords and '0' or '1' human-generated
data['machine_generated'] = data['strength'].apply(lambda x: 1 if x == 2 else 0)
print("Label transformation completed: '2' as machine-generated, '0' and '1' as human-generated.")

# Convert 'password' into some features: length of password
data['length'] = data['password'].apply(len)
data['num_digits'] = data['password'].str.count(r'\d')  # Count of digits in the password
data['num_letters'] = data['password'].str.count(r'[a-zA-Z]')  # Count of letters
data['num_special'] = data['password'].str.count(r'\W')  # Count of special characters (non-alphanumeric)

# Separate features and labels
X = data[['length', 'num_digits', 'num_letters', 'num_special']]  # Using new features
y = data['machine_generated']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("Data split into training and testing sets.")


# Further split training set for validation (90% training, 10% validation)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)

# Creating models
models = {
    "Decision Tree": DecisionTreeClassifier(),
    "Naive Bayes": GaussianNB(),
    "KNN with k=3": KNeighborsClassifier(n_neighbors=3),
    "KNN with k=5": KNeighborsClassifier(n_neighbors=5),
    "SVM": SVC(kernel='linear')  # Two-class classification as required
}

# Training models and validating
for name, model in models.items():
    model.fit(X_train, y_train)
    val_pred = model.predict(X_val)
    accuracy = accuracy_score(y_val, val_pred)
    print(f"{name} validation accuracy: {accuracy}")

# Evaluate on test set
for name, model in models.items():
    test_pred = model.predict(X_test)
    test_accuracy = accuracy_score(y_test, test_pred)
    print(f"{name} test accuracy: {test_accuracy}")
